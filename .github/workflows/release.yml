name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger only on tags with 'v' prefix (e.g., v1.0.0)

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'  # or the Node.js version required for your project

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Build for Windows
      - name: Build Windows binaries
        run: npm run build:win  # Customize with your build script
        env:
          CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }} # Optional: for code signing
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # Step 5: Package the app using Electron Builder
      - name: Package Application
        run: npm run package  # Customize based on your script to package binaries
        env:
          CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # Step 6: Upload Release Artifacts
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: path/to/your/binary.exe  # Update this to match the built binary path
          asset_name: your_project_name.exe    # Name the binary as desired
          asset_content_type: application/octet-stream
